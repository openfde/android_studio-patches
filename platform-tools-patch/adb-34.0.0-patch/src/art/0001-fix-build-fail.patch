From 69a8c8e464c97121c8e786f4908fce3131d9b5de Mon Sep 17 00:00:00 2001
From: pngcui <pngcui1224@163.com>
Date: Tue, 23 Sep 2025 19:26:53 +0800
Subject: [PATCH] fix build fail

---
 libartbase/arch/instruction_set.cc    |  1 +
 libartbase/arch/instruction_set.h     | 37 +++++++++++++++++++++++++++
 libartbase/base/arena_allocator.h     |  2 ++
 libartbase/base/bit_vector.h          |  1 +
 libartbase/base/file_magic.cc         |  1 +
 libartbase/base/file_utils.cc         |  1 +
 libartbase/base/hash_set.h            |  9 ++++---
 libartbase/base/logging.cc            |  1 +
 libartbase/base/mem_map.cc            | 14 ++++++++++
 libartbase/base/membarrier.cc         |  1 +
 libartbase/base/memfd.cc              |  1 +
 libartbase/base/metrics/metrics.h     | 20 +++++++--------
 libartbase/base/scoped_flock.cc       |  1 +
 libartbase/base/unix_file/fd_file.cc  |  1 +
 libdexfile/dex/art_dex_file_loader.cc |  1 +
 libdexfile/dex/descriptors_names.cc   |  1 +
 libdexfile/dex/dex_file.cc            | 25 ++++++++++++++++++
 libdexfile/dex/dex_file_loader.h      |  1 +
 libdexfile/dex/method_reference.h     |  2 ++
 19 files changed, 108 insertions(+), 13 deletions(-)

diff --git a/libartbase/arch/instruction_set.cc b/libartbase/arch/instruction_set.cc
index 811e723..0e2d824 100644
--- a/libartbase/arch/instruction_set.cc
+++ b/libartbase/arch/instruction_set.cc
@@ -21,6 +21,7 @@
 #include "android-base/stringprintf.h"
 #include "base/bit_utils.h"
 #include "base/globals.h"
+#include <string.h>
 
 namespace art {
 
diff --git a/libartbase/arch/instruction_set.h b/libartbase/arch/instruction_set.h
index 8d59f1b..c2cb783 100644
--- a/libartbase/arch/instruction_set.h
+++ b/libartbase/arch/instruction_set.h
@@ -24,6 +24,43 @@
 #include "base/enums.h"
 #include "base/macros.h"
 
+// see aosp/art/build/art.go
+// We need larger stack overflow guards for ASAN, as the compiled code will hav
+// larger frame sizes. For simplicity, just use global not-target-specific cflags.
+// Note: We increase this for both debug and non-debug, as the overflow gap will
+//       be compiled into managed code. We always preopt (and build core images) with
+//       the debug version. So make the gap consistent (and adjust for the worst).
+
+/*
+if len(ctx.Config().SanitizeDevice()) > 0 || len(ctx.Config().SanitizeHost()) > 0 {
+    cflags = append(cflags,
+        "-DART_STACK_OVERFLOW_GAP_arm=8192",
+        "-DART_STACK_OVERFLOW_GAP_arm64=16384",
+        "-DART_STACK_OVERFLOW_GAP_riscv64=16384",
+        "-DART_STACK_OVERFLOW_GAP_x86=16384",
+        "-DART_STACK_OVERFLOW_GAP_x86_64=20480")
+} else {
+    cflags = append(cflags,
+        "-DART_STACK_OVERFLOW_GAP_arm=8192",
+        "-DART_STACK_OVERFLOW_GAP_arm64=8192",
+        "-DART_STACK_OVERFLOW_GAP_riscv64=8192",
+        "-DART_STACK_OVERFLOW_GAP_x86=8192",
+        "-DART_STACK_OVERFLOW_GAP_x86_64=8192")
+}
+*/
+
+#define ART_STACK_OVERFLOW_GAP_arm 16384
+#define ART_STACK_OVERFLOW_GAP_arm64 16384
+#define ART_STACK_OVERFLOW_GAP_riscv64 16384
+#define ART_STACK_OVERFLOW_GAP_x86 16384
+#define ART_STACK_OVERFLOW_GAP_x86_64 20480
+
+// see aosp/art/build/art.go
+// default frame size limit: 1736
+// device limit: 7400
+// host limit: 10000
+#define ART_FRAME_SIZE_LIMIT 10000
+
 namespace art {
 
 enum class InstructionSet {
diff --git a/libartbase/base/arena_allocator.h b/libartbase/base/arena_allocator.h
index c4f713a..d1ead16 100644
--- a/libartbase/base/arena_allocator.h
+++ b/libartbase/base/arena_allocator.h
@@ -19,6 +19,7 @@
 
 #include <stddef.h>
 #include <stdint.h>
+#include <string.h>
 
 #include "bit_utils.h"
 #include "debug_stack.h"
@@ -26,6 +27,7 @@
 #include "macros.h"
 #include "memory_tool.h"
 
+
 namespace art {
 
 class Arena;
diff --git a/libartbase/base/bit_vector.h b/libartbase/base/bit_vector.h
index 071577b..67f191d 100644
--- a/libartbase/base/bit_vector.h
+++ b/libartbase/base/bit_vector.h
@@ -23,6 +23,7 @@
 
 #include "bit_utils.h"
 #include "globals.h"
+#include <string.h>
 
 namespace art {
 
diff --git a/libartbase/base/file_magic.cc b/libartbase/base/file_magic.cc
index 21b762f..02c01d9 100644
--- a/libartbase/base/file_magic.cc
+++ b/libartbase/base/file_magic.cc
@@ -24,6 +24,7 @@
 #include <android-base/stringprintf.h>
 
 #include "unix_file/fd_file.h"
+#include <string.h>
 
 namespace art {
 
diff --git a/libartbase/base/file_utils.cc b/libartbase/base/file_utils.cc
index 2396289..d9432a3 100644
--- a/libartbase/base/file_utils.cc
+++ b/libartbase/base/file_utils.cc
@@ -23,6 +23,7 @@
 #include <sys/wait.h>
 #endif
 #include <unistd.h>
+#include <string.h>
 
 // We need dladdr.
 #if !defined(__APPLE__) && !defined(_WIN32)
diff --git a/libartbase/base/hash_set.h b/libartbase/base/hash_set.h
index 3f3c8f2..5741ba6 100644
--- a/libartbase/base/hash_set.h
+++ b/libartbase/base/hash_set.h
@@ -745,7 +745,8 @@ class HashSet {
     data_ = allocfn_.allocate(num_buckets_);
     owns_data_ = true;
     for (size_t i = 0; i < num_buckets_; ++i) {
-      allocfn_.construct(allocfn_.address(data_[i]));
+      // allocfn_.construct(allocfn_.address(data_[i]));
+      std::allocator_traits<decltype(allocfn_)>::construct(allocfn_, std::addressof(data_[i]));
       emptyfn_.MakeEmpty(data_[i]);
     }
   }
@@ -753,7 +754,8 @@ class HashSet {
   void DeallocateStorage() {
     if (owns_data_) {
       for (size_t i = 0; i < NumBuckets(); ++i) {
-        allocfn_.destroy(allocfn_.address(data_[i]));
+        // allocfn_.destroy(allocfn_.address(data_[i]));
+        std::allocator_traits<decltype(allocfn_)>::destroy(allocfn_, std::addressof(data_[i]));
       }
       if (data_ != nullptr) {
         allocfn_.deallocate(data_, NumBuckets());
@@ -788,7 +790,8 @@ class HashSet {
         data_[FirstAvailableSlot(IndexForHash(hashfn_(element)))] = std::move(element);
       }
       if (owned_data) {
-        allocfn_.destroy(allocfn_.address(element));
+        // allocfn_.destroy(allocfn_.address(element));
+        std::allocator_traits<decltype(allocfn_)>::destroy(allocfn_, std::addressof(element));
       }
     }
     if (owned_data) {
diff --git a/libartbase/base/logging.cc b/libartbase/base/logging.cc
index e9bffaf..0dc6fa5 100644
--- a/libartbase/base/logging.cc
+++ b/libartbase/base/logging.cc
@@ -32,6 +32,7 @@
 #include <sys/types.h>
 #include <unistd.h>
 #endif
+#include <string.h>
 
 namespace art {
 
diff --git a/libartbase/base/mem_map.cc b/libartbase/base/mem_map.cc
index b3e2840..255aee8 100644
--- a/libartbase/base/mem_map.cc
+++ b/libartbase/base/mem_map.cc
@@ -45,6 +45,20 @@
 #define MAP_ANONYMOUS MAP_ANON
 #endif
 
+// see aosp/build/soong/android/config.go
+/*
+func (c *config) LibartImgHostBaseAddress() string {
+	return "0x60000000"
+}
+
+func (c *config) LibartImgDeviceBaseAddress() string {
+	return "0x70000000"
+}
+*/
+
+// device base address
+#define ART_BASE_ADDRESS 0x70000000
+
 namespace art {
 
 using android::base::StringPrintf;
diff --git a/libartbase/base/membarrier.cc b/libartbase/base/membarrier.cc
index 48f47df..7c250a3 100644
--- a/libartbase/base/membarrier.cc
+++ b/libartbase/base/membarrier.cc
@@ -18,6 +18,7 @@
 
 #include <errno.h>
 #include <stdio.h>
+#include <string.h>
 
 #if !defined(_WIN32)
 #include <sys/syscall.h>
diff --git a/libartbase/base/memfd.cc b/libartbase/base/memfd.cc
index 8512a3a..8d753b8 100644
--- a/libartbase/base/memfd.cc
+++ b/libartbase/base/memfd.cc
@@ -15,6 +15,7 @@
  */
 
 #include "memfd.h"
+#include <string.h>
 
 #include <errno.h>
 #include <stdio.h>
diff --git a/libartbase/base/metrics/metrics.h b/libartbase/base/metrics/metrics.h
index 8432be5..ef92a44 100644
--- a/libartbase/base/metrics/metrics.h
+++ b/libartbase/base/metrics/metrics.h
@@ -300,7 +300,7 @@ class MetricsCounter : public MetricsBase<T> {
   }
 
   void AddOne() { Add(1u); }
-  void Add(value_t value) { value_.fetch_add(value, std::memory_order::memory_order_relaxed); }
+  void Add(value_t value) { value_.fetch_add(value, std::memory_order_relaxed); }
 
   void Report(const std::vector<MetricsBackend*>& backends) const {
     for (MetricsBackend* backend : backends) {
@@ -310,7 +310,7 @@ class MetricsCounter : public MetricsBase<T> {
 
  protected:
   void Reset() { value_ = 0; }
-  value_t Value() const { return value_.load(std::memory_order::memory_order_relaxed); }
+  value_t Value() const { return value_.load(std::memory_order_relaxed); }
 
  private:
   std::atomic<value_t> value_;
@@ -343,12 +343,12 @@ class MetricsAverage final : public MetricsCounter<datum_id, T> {
   // make a huge difference to the reporter.
   void Add(value_t value) {
     MetricsCounter<datum_id, value_t>::Add(value);
-    count_.fetch_add(1, std::memory_order::memory_order_release);
+    count_.fetch_add(1, std::memory_order_release);
   }
 
   void Report(const std::vector<MetricsBackend*>& backends) const {
     count_t value = MetricsCounter<datum_id, value_t>::Value();
-    count_t count = count_.load(std::memory_order::memory_order_acquire);
+    count_t count = count_.load(std::memory_order_acquire);
     // Avoid divide-by-0.
     count_t average_value = count != 0 ? value / count : 0;
     for (MetricsBackend* backend : backends) {
@@ -383,12 +383,12 @@ class MetricsDeltaCounter : public MetricsBase<T> {
   }
 
   void Add(value_t value) override {
-    value_.fetch_add(value, std::memory_order::memory_order_relaxed);
+    value_.fetch_add(value, std::memory_order_relaxed);
   }
   void AddOne() { Add(1u); }
 
   void ReportAndReset(const std::vector<MetricsBackend*>& backends) {
-    value_t value = value_.exchange(0, std::memory_order::memory_order_relaxed);
+    value_t value = value_.exchange(0, std::memory_order_relaxed);
     for (MetricsBackend* backend : backends) {
       backend->ReportCounter(datum_id, value);
     }
@@ -424,7 +424,7 @@ class MetricsHistogram final : public MetricsBase<int64_t> {
 
   void Add(int64_t value) {
     const size_t i = FindBucketId(value);
-    buckets_[i].fetch_add(1u, std::memory_order::memory_order_relaxed);
+    buckets_[i].fetch_add(1u, std::memory_order_relaxed);
   }
 
   void Report(const std::vector<MetricsBackend*>& backends) const {
@@ -480,7 +480,7 @@ class MetricsAccumulator final : MetricsBase<T> {
   }
 
   void Add(T value) {
-    T current = value_.load(std::memory_order::memory_order_relaxed);
+    T current = value_.load(std::memory_order_relaxed);
     T new_value;
     do {
       new_value = AccumulatorFunction(current, value);
@@ -489,7 +489,7 @@ class MetricsAccumulator final : MetricsBase<T> {
         break;
       }
     } while (!value_.compare_exchange_weak(
-        current, new_value, std::memory_order::memory_order_relaxed));
+        current, new_value, std::memory_order_relaxed));
   }
 
   // Report the metric as a counter, since this has only a single value.
@@ -503,7 +503,7 @@ class MetricsAccumulator final : MetricsBase<T> {
   }
 
  private:
-  T Value() const { return value_.load(std::memory_order::memory_order_relaxed); }
+  T Value() const { return value_.load(std::memory_order_relaxed); }
 
   std::atomic<T> value_;
 
diff --git a/libartbase/base/scoped_flock.cc b/libartbase/base/scoped_flock.cc
index 3f44e25..492487b 100644
--- a/libartbase/base/scoped_flock.cc
+++ b/libartbase/base/scoped_flock.cc
@@ -19,6 +19,7 @@
 #include <sys/file.h>
 #include <sys/stat.h>
 
+#include <string.h>
 #include <android-base/logging.h>
 #include <android-base/stringprintf.h>
 
diff --git a/libartbase/base/unix_file/fd_file.cc b/libartbase/base/unix_file/fd_file.cc
index a955b7d..e8f017e 100644
--- a/libartbase/base/unix_file/fd_file.cc
+++ b/libartbase/base/unix_file/fd_file.cc
@@ -20,6 +20,7 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
+#include <string.h>
 
 #if defined(__BIONIC__)
 #include <android/fdsan.h>
diff --git a/libdexfile/dex/art_dex_file_loader.cc b/libdexfile/dex/art_dex_file_loader.cc
index 654668e..3fa79a8 100644
--- a/libdexfile/dex/art_dex_file_loader.cc
+++ b/libdexfile/dex/art_dex_file_loader.cc
@@ -34,6 +34,7 @@
 #include "dex/dex_file.h"
 #include "dex/dex_file_verifier.h"
 #include "dex/standard_dex_file.h"
+#include <string.h>
 
 namespace art {
 
diff --git a/libdexfile/dex/descriptors_names.cc b/libdexfile/dex/descriptors_names.cc
index 44cb7cb..fe3d3b2 100644
--- a/libdexfile/dex/descriptors_names.cc
+++ b/libdexfile/dex/descriptors_names.cc
@@ -21,6 +21,7 @@
 
 #include "base/macros.h"
 #include "dex/utf-inl.h"
+#include <string.h>
 
 namespace art {
 
diff --git a/libdexfile/dex/dex_file.cc b/libdexfile/dex/dex_file.cc
index 6ebb5b8..9df8d7f 100644
--- a/libdexfile/dex/dex_file.cc
+++ b/libdexfile/dex/dex_file.cc
@@ -602,6 +602,31 @@ dex::ProtoIndex DexFile::GetProtoIndexForCallSite(uint32_t call_site_idx) const
   return dex::ProtoIndex(it.GetJavaValue().i);
 }
 
+std::ostream& operator<<(std::ostream& os, EncodedArrayValueIterator::ValueType rhs) {
+  switch (rhs) {
+    case EncodedArrayValueIterator::kByte: os << "Byte"; break;
+    case EncodedArrayValueIterator::kShort: os << "Short"; break;
+    case EncodedArrayValueIterator::kChar: os << "Char"; break;
+    case EncodedArrayValueIterator::kInt: os << "Int"; break;
+    case EncodedArrayValueIterator::kLong: os << "Long"; break;
+    case EncodedArrayValueIterator::kFloat: os << "Float"; break;
+    case EncodedArrayValueIterator::kDouble: os << "Double"; break;
+    case EncodedArrayValueIterator::kMethodType: os << "MethodType"; break;
+    case EncodedArrayValueIterator::kMethodHandle: os << "MethodHandle"; break;
+    case EncodedArrayValueIterator::kString: os << "String"; break;
+    case EncodedArrayValueIterator::kType: os << "Type"; break;
+    case EncodedArrayValueIterator::kField: os << "Field"; break;
+    case EncodedArrayValueIterator::kMethod: os << "Method"; break;
+    case EncodedArrayValueIterator::kEnum: os << "Enum"; break;
+    case EncodedArrayValueIterator::kArray: os << "Array"; break;
+    case EncodedArrayValueIterator::kAnnotation: os << "Annotation"; break;
+    case EncodedArrayValueIterator::kNull: os << "Null"; break;
+    case EncodedArrayValueIterator::kBoolean: os << "Boolean"; break;
+    default: os << "EncodedArrayValueIterator::ValueType[" << static_cast<int>(rhs) << "]"; break;
+  }
+  return os;
+}
+
 // Checks that visibility is as expected. Includes special behavior for M and
 // before to allow runtime and build visibility when expecting runtime.
 std::ostream& operator<<(std::ostream& os, const DexFile& dex_file) {
diff --git a/libdexfile/dex/dex_file_loader.h b/libdexfile/dex/dex_file_loader.h
index ef45aa8..c797e83 100644
--- a/libdexfile/dex/dex_file_loader.h
+++ b/libdexfile/dex/dex_file_loader.h
@@ -20,6 +20,7 @@
 #include <cstdint>
 #include <memory>
 #include <string>
+#include <cstring>
 #include <vector>
 
 namespace art {
diff --git a/libdexfile/dex/method_reference.h b/libdexfile/dex/method_reference.h
index f66ac30..ba72b2d 100644
--- a/libdexfile/dex/method_reference.h
+++ b/libdexfile/dex/method_reference.h
@@ -22,6 +22,8 @@
 #include "dex/dex_file.h"
 #include "dex/dex_file_reference.h"
 
+#include <cstring>
+
 namespace art {
 
 // A method is uniquely located by its DexFile and the method_ids_ table index into that DexFile
-- 
2.25.1

