From 3f2e5baefff6cf8a9e1b069b42cb192c1e3f3fa9 Mon Sep 17 00:00:00 2001
From: pngcui <pngcui1224@163.com>
Date: Fri, 19 Sep 2025 10:49:17 +0800
Subject: [PATCH 3/3] fix firebase-testing build failed

Change-Id: I1a54d0bb822fc8a0fc07e3b82c62507b57d511c8
---
 .../CloudTestMatrixTargetConfigurable.java    | 11 +++--
 .../testing/launcher/CloudAuthenticator.kt    | 49 ++++++++++---------
 2 files changed, 33 insertions(+), 27 deletions(-)

diff --git a/firebase-testing/src/com/google/gct/testing/android/CloudTestMatrixTargetConfigurable.java b/firebase-testing/src/com/google/gct/testing/android/CloudTestMatrixTargetConfigurable.java
index 1d8ba075..a602874a 100644
--- a/firebase-testing/src/com/google/gct/testing/android/CloudTestMatrixTargetConfigurable.java
+++ b/firebase-testing/src/com/google/gct/testing/android/CloudTestMatrixTargetConfigurable.java
@@ -30,8 +30,8 @@ import com.google.gct.login2.LoginFeature;
 import com.google.gct.login2.LoginLogoutCompletedCallback;
 import com.google.gct.login2.PreferredUser;
 import com.google.gct.testing.launcher.CloudAuthenticator;
-import com.google.services.firebase.FirebaseLoginFeature;
-import com.google.wireless.android.sdk.stats.GoogleLoginPluginEvent;
+//import com.google.services.firebase.FirebaseLoginFeature;
+//import com.google.wireless.android.sdk.stats.GoogleLoginPluginEvent;
 import com.intellij.icons.AllIcons;
 import com.intellij.openapi.Disposable;
 import com.intellij.openapi.actionSystem.ActionUpdateThread;
@@ -82,7 +82,7 @@ public class CloudTestMatrixTargetConfigurable implements DeployTargetConfigurab
       public void actionPerformed(ActionEvent e) {
         myFacet = context.getModule() == null ? null : AndroidFacet.getInstance(context.getModule());
         if (ApplicationManager.getApplication().getService(GoogleLoginService.class).isLoggedIn(
-          LoginFeature.Companion.getEP_NAME().findExtension(FirebaseLoginFeature.class))) {
+          LoginFeature.Companion.getEP_NAME().findExtension(null))) {
           myCloudConfigurationComboBox.setFacet(myFacet);
           myCloudProjectSelector.setFacet(myFacet);
         }
@@ -101,8 +101,9 @@ public class CloudTestMatrixTargetConfigurable implements DeployTargetConfigurab
     connectToCloudPanel.add(createRunTestsInCloudPane(topPanel.getBackground(), 6, 4), prepareEditorPaneGridConstraints(0));
     JButton connectToCloudButton = new JButton(GoogleLoginService.getInstance().isLoggedIn() ? "Authorize Firebase" : "Sign in with Google");
     connectToCloudButton.addActionListener(e -> GoogleLoginService.getInstance().logInAsync(
-      ImmutableSet.of(LoginFeature.Companion.getEP_NAME().findExtension(FirebaseLoginFeature.class)),
-      GoogleLoginPluginEvent.LoginType.FEATURE_LOGIN,
+      ImmutableSet.of(LoginFeature.Companion.getEP_NAME().findExtension(null)),
+      //GoogleLoginPluginEvent.LoginType.FEATURE_LOGIN,
+      null,
       PreferredUser.ActiveUser.INSTANCE, () -> updateVisibility(), topPanel));
     connectToCloudPanel.add(connectToCloudButton, prepareElementGridConstraints(1, 0));
     connectToCloudPanel.add(createSignupForCloudPane(topPanel.getBackground(), 6, 0), prepareEditorPaneGridConstraints(2));
diff --git a/firebase-testing/src/com/google/gct/testing/launcher/CloudAuthenticator.kt b/firebase-testing/src/com/google/gct/testing/launcher/CloudAuthenticator.kt
index 8d9eeea4..89ccc085 100644
--- a/firebase-testing/src/com/google/gct/testing/launcher/CloudAuthenticator.kt
+++ b/firebase-testing/src/com/google/gct/testing/launcher/CloudAuthenticator.kt
@@ -26,7 +26,7 @@ import com.google.api.services.toolresults.ToolResults
 import com.google.gct.login2.GoogleLoginService
 import com.google.gct.login2.LoginFeature
 import com.google.gct.testing.CloudTestingUtils
-import com.google.services.firebase.FirebaseLoginFeature
+//import com.google.services.firebase.FirebaseLoginFeature
 import com.intellij.openapi.components.Service
 import com.intellij.openapi.components.service
 import kotlinx.coroutines.CoroutineScope
@@ -62,7 +62,7 @@ class CloudAuthenticator(scope: CoroutineScope) {
     }
   }
 
-  private val firebaseFeature = LoginFeature.feature<FirebaseLoginFeature>()
+  //private val firebaseFeature = LoginFeature.feature<FirebaseLoginFeature>()
 
   val storage: Storage
     get() {
@@ -70,7 +70,7 @@ class CloudAuthenticator(scope: CoroutineScope) {
         ?: Storage.Builder(
             myHttpTransport,
             GsonFactory.getDefaultInstance(),
-            firebaseFeature.credential(),
+            null,
           )
           .setApplicationName(APPLICATION_NAME)
           .build()
@@ -82,7 +82,8 @@ class CloudAuthenticator(scope: CoroutineScope) {
       Testing.Builder(
           myHttpTransport,
           GsonFactory.getDefaultInstance(),
-          firebaseFeature.credential(),
+          null,
+          //firebaseFeature.credential(),
         )
         .setApplicationName(APPLICATION_NAME)
         .setRootUrl(testBackendUrl)
@@ -91,7 +92,8 @@ class CloudAuthenticator(scope: CoroutineScope) {
       ToolResults.Builder(
           myHttpTransport,
           GsonFactory.getDefaultInstance(),
-          firebaseFeature.credential(),
+          null,
+          //firebaseFeature.credential(),
         )
         .setApplicationName(APPLICATION_NAME)
         .setRootUrl(toolResultsBackendUrl)
@@ -104,7 +106,8 @@ class CloudAuthenticator(scope: CoroutineScope) {
         ?: CloudResourceManager.Builder(
             myHttpTransport,
             GsonFactory.getDefaultInstance(),
-            firebaseFeature.credential(),
+            null,
+            //firebaseFeature.credential(),
           )
           .setApplicationName(APPLICATION_NAME)
           .build()
@@ -121,7 +124,8 @@ class CloudAuthenticator(scope: CoroutineScope) {
       ?: Testing.Builder(
           myHttpTransport,
           GsonFactory.getDefaultInstance(),
-          firebaseFeature.credential(),
+          null,
+          //firebaseFeature.credential(),
         )
         .setApplicationName(APPLICATION_NAME)
         .apply {
@@ -200,30 +204,31 @@ class CloudAuthenticator(scope: CoroutineScope) {
         ?: ToolResults.Builder(
             myHttpTransport,
             GsonFactory.getDefaultInstance(),
-            firebaseFeature.credential(),
+            null,
+            //firebaseFeature.credential(),
           )
           .setApplicationName(APPLICATION_NAME)
           .build()
           .also { myToolresults = it }
 
   fun prepareCredential() {
-    if (!firebaseFeature.isLoggedIn()) {
-      if (!authorize()) {
-        throw RuntimeException(
-          "Failed to authorize to Google Cloud! Please check if you set the correct user account."
-        )
-      }
-    }
+    //if (!firebaseFeature.isLoggedIn()) {
+    //  if (!authorize()) {
+    //    throw RuntimeException(
+    //      "Failed to authorize to Google Cloud! Please check if you set the correct user account."
+    //    )
+    //  }
+    //}
   }
 
   /** Authorizes the installed application to access user's protected data. */
   fun authorize(): Boolean {
-    if (!firebaseFeature.isLoggedIn()) {
-      val complete = CompletableFuture<Nothing>()
-      firebaseFeature.logInAsync { complete.complete(null) }
-      complete.get()
-    }
-    return firebaseFeature.isLoggedIn()
+    //if (!firebaseFeature.isLoggedIn()) {
+    //  val complete = CompletableFuture<Nothing>()
+    //  firebaseFeature.logInAsync { complete.complete(null) }
+    //  complete.get()
+    //}
+    return false;//firebaseFeature.isLoggedIn()
   }
 
   companion object {
@@ -235,6 +240,6 @@ class CloudAuthenticator(scope: CoroutineScope) {
     @JvmStatic
     @Deprecated("Just check the status directly")
     val isUserLoggedIn: Boolean
-      get() = LoginFeature.feature<FirebaseLoginFeature>().isLoggedIn()
+      get() = false;//LoginFeature.feature<FirebaseLoginFeature>().isLoggedIn()
   }
 }
-- 
2.34.1

